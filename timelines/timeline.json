[{"source":"Test Process","id":0,"command":{"name_":"getAvailableLogTypes","parameters_":{}},"start":1530022875097,"end":1530022875098},{"source":"Test Process","id":1,"command":{"name_":"get","parameters_":{"url":"data:text/html,<html></html>"}},"start":1530022875818,"end":1530022875868},{"source":"Test Process","id":2,"command":{"name_":"executeScript","parameters_":{"script":"window.name = \"NG_DEFER_BOOTSTRAP!\" + window.name;window.location.replace(\"http://localhost:4200/\");","args":[]}},"start":1530022875869,"end":1530022876883},{"source":"Test Process","id":3,"command":{"name_":"executeScript","parameters_":{"script":"return window.location.href;","args":[]}},"start":1530022876884,"end":1530022876895},{"source":"Test Process","id":4,"command":{"name_":"executeAsyncScript","parameters_":{"script":"try { return (function (attempts, ng12Hybrid, asyncCallback) {\n  var callback = function(args) {\n    setTimeout(function() {\n      asyncCallback(args);\n    }, 0);\n  };\n  var definitelyNg1 = !!ng12Hybrid;\n  var definitelyNg2OrNewer = false;\n  var check = function(n) {\n    try {\n      /* Figure out which version of angular we're waiting on */\n      if (!definitelyNg1 && !definitelyNg2OrNewer) {\n        if (window.angular && !(window.angular.version && window.angular.version.major > 1)) {\n          definitelyNg1 = true;\n        } else if (window.getAllAngularTestabilities) {\n          definitelyNg2OrNewer = true;\n        }\n      }\n      /* See if our version of angular is ready */\n      if (definitelyNg1) {\n        if (window.angular && window.angular.resumeBootstrap) {\n          return callback({ver: 1});\n        }\n      } else if (definitelyNg2OrNewer) {\n        if (true /* ng2 has no resumeBootstrap() */) {\n          return callback({ver: 2});\n        }\n      }\n      /* Try again (or fail) */\n      if (n < 1) {\n        if (definitelyNg1 && window.angular) {\n          callback({message: 'angular never provided resumeBootstrap'});\n        } else if (ng12Hybrid && !window.angular) {\n          callback({message: 'angular 1 never loaded' +\n              window.getAllAngularTestabilities ? ' (are you sure this app ' +\n              'uses ngUpgrade?  Try un-setting ng12Hybrid)' : ''});\n        } else {\n          callback({message: 'retries looking for angular exceeded'});\n        }\n      } else {\n        window.setTimeout(function() {check(n - 1);}, 1000);\n      }\n    } catch (e) {\n      callback({message: e});\n    }\n  };\n  check(attempts);\n}).apply(this, arguments); }\ncatch(e) { throw (e instanceof Error) ? e : new Error(e); }","args":[10,false]}},"start":1530022876896,"end":1530022876904},{"source":"Test Process","id":5,"command":{"name_":"executeAsyncScript","parameters_":{"script":"try { return (function anonymous() {\nfunction getNg1Hooks(selector, injectorPlease) {\n  function tryEl(el) {\n    try {\n      if (!injectorPlease && angular.getTestability) {\n        var $$testability = angular.getTestability(el);\n        if ($$testability) {\n          return {$$testability: $$testability};\n        }\n      } else {\n        var $injector = angular.element(el).injector();\n        if ($injector) {\n          return {$injector: $injector};\n        }\n      }\n    } catch(err) {}\n  }\n  function trySelector(selector) {\n    var els = document.querySelectorAll(selector);\n    for (var i = 0; i < els.length; i++) {\n      var elHooks = tryEl(els[i]);\n      if (elHooks) {\n        return elHooks;\n      }\n    }\n  }\n\n  if (selector) {\n    return trySelector(selector);\n  } else if (window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__) {\n    var $injector = window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__;\n    var $$testability = null;\n    try {\n      $$testability = $injector.get('$$testability');\n    } catch (e) {}\n    return {$injector: $injector, $$testability: $$testability};\n  } else {\n    return tryEl(document.body) ||\n        trySelector('[ng-app]') || trySelector('[ng\\\\:app]') ||\n        trySelector('[ng-controller]') || trySelector('[ng\\\\:controller]');\n  }\n};  return (function (rootSelector, callback) {\n\n  try {\n    // Wait for both angular1 testability and angular2 testability.\n\n    var testCallback = callback;\n\n    // Wait for angular1 testability first and run waitForAngular2 as a callback\n    var waitForAngular1 = function(callback) {\n\n      if (window.angular) {\n        var hooks = getNg1Hooks(rootSelector);\n        if (!hooks){\n          callback();  // not an angular1 app\n        }\n        else{\n          if (hooks.$$testability) {\n            hooks.$$testability.whenStable(callback);\n          } else if (hooks.$injector) {\n            hooks.$injector.get('$browser')\n                .notifyWhenNoOutstandingRequests(callback);\n          } else if (!rootSelector) {\n            throw new Error(\n                'Could not automatically find injector on page: \"' +\n                window.location.toString() + '\".  Consider using config.rootEl');\n          } else {\n            throw new Error(\n                'root element (' + rootSelector + ') has no injector.' +\n                ' this may mean it is not inside ng-app.');\n          }\n        }\n      }\n      else {callback();}  // not an angular1 app\n    };\n\n    // Wait for Angular2 testability and then run test callback\n    var waitForAngular2 = function() {\n      if (window.getAngularTestability) {\n        if (rootSelector) {\n          var testability = null;\n          var el = document.querySelector(rootSelector);\n          try{\n            testability = window.getAngularTestability(el);\n          }\n          catch(e){}\n          if (testability) {\n            testability.whenStable(testCallback);\n            return;\n          }\n        }\n\n        // Didn't specify root element or testability could not be found\n        // by rootSelector. This may happen in a hybrid app, which could have\n        // more than one root.\n        var testabilities = window.getAllAngularTestabilities();\n        var count = testabilities.length;\n\n        // No angular2 testability, this happens when\n        // going to a hybrid page and going back to a pure angular1 page\n        if (count === 0) {\n          testCallback();\n          return;\n        }\n\n        var decrement = function() {\n          count--;\n          if (count === 0) {\n            testCallback();\n          }\n        };\n        testabilities.forEach(function(testability) {\n          testability.whenStable(decrement);\n        });\n\n      }\n      else {testCallback();}  // not an angular2 app\n    };\n\n    if (!(window.angular) && !(window.getAngularTestability)) {\n      // no testability hook\n      throw new Error(\n          'both angularJS testability and angular testability are undefined.' +\n          '  This could be either ' +\n          'because this is a non-angular page or because your test involves ' +\n          'client-side navigation, which can interfere with Protractor\\'s ' +\n          'bootstrapping.  See http://git.io/v4gXM for details');\n    } else {waitForAngular1(waitForAngular2);}  // Wait for angular1 and angular2\n                                                // Testability hooks sequentially\n\n  } catch (err) {\n    callback(err.message);\n  }\n\n}).apply(this, arguments);\n}).apply(this, arguments); }\ncatch(e) { throw (e instanceof Error) ? e : new Error(e); }","args":[""]}},"start":1530022876905,"end":1530022876914},{"source":"Test Process","id":6,"command":{"name_":"findElements","parameters_":{"using":"css selector","value":"app-root h1"}},"start":1530022876915,"end":1530022876942},{"source":"Test Process","id":7,"command":{"name_":"quit","parameters_":{}},"start":1530022876962,"end":1530022877014}]